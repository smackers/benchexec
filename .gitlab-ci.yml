# This file is part of BenchExec, a framework for reliable benchmarking:
# https://github.com/sosy-lab/benchexec
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# To execute a job locally, install gitlab-runner (https://docs.gitlab.com/runner/install/)
# and run the following command:
# gitlab-runner exec docker --docker-privileged --docker-volumes /sys/fs/cgroup:/sys/fs/cgroup:rw --env CI_REGISTRY_IMAGE=registry.gitlab.com/sosy-lab/software/benchexec <<JOB_NAME>>

variables:
  PRIMARY_USER: benchexec

image: ${CI_REGISTRY_IMAGE}/test:python-${PYTHON_VERSION}

stages:
  - images
  - test
  - deploy

.unit-tests: &unit-tests
  stage: test
  before_script:
    # Create user, we do not want to test as root
    - adduser --disabled-login --gecos "" $PRIMARY_USER
    # Activate coverage for subprocesses
    - printf 'import coverage\ncoverage.process_startup()\n' > "/usr/local/lib/python${PYTHON_VERSION}/site-packages/sitecustomize.py"
    # Give $PRIMARY_USER permission to create cgroups
    - test/for_each_of_my_cgroups.sh chgrp $PRIMARY_USER
    - test/for_each_of_my_cgroups.sh chmod g+w $PRIMARY_USER
    # Install BenchExec
    - sudo -u $PRIMARY_USER pip install --user .
    # Start lxcfs
    - lxcfs /var/lib/lxcfs &
  script:
    - sudo -u $PRIMARY_USER
        COVERAGE_PROCESS_START=.coveragerc
        coverage run setup.py test
  after_script:
    - sudo -u $PRIMARY_USER coverage combine
    - sudo -u $PRIMARY_USER coverage report
    - sudo -u $PRIMARY_USER coverage xml
  tags:
    - privileged
  artifacts:
    paths:
      - coverage.xml

unit-tests:python-3.5:
  <<: *unit-tests
  variables:
    PYTHON_VERSION: '3.5'

unit-tests:python-3.6:
  <<: *unit-tests
  variables:
    PYTHON_VERSION: '3.6'

unit-tests:python-3.7:
  <<: *unit-tests
  variables:
    PYTHON_VERSION: '3.7'

unit-tests:python-3.8:
  <<: *unit-tests
  variables:
    PYTHON_VERSION: '3.8'

deploy-coverage:
  stage: deploy
  variables:
    PYTHON_VERSION: '3.7'
  before_script:
    - pip install -e git+https://github.com/codacy/python-codacy-coverage.git#egg=codacy
  script:
    - python-codacy-coverage -r coverage.xml
  dependencies:
    - unit-tests:python-3.7
  only:
    refs:
      - master
    variables:
      - $CODACY_PROJECT_TOKEN # required for job
      - $CI_PROJECT_PATH == $PROJECT_PATH # not on forks


# Static checks
check-format:
  stage: test
  image: python:3.7
  before_script:
    - pip install black
  script:
    - black . --check --diff

flake8:
  stage: test
  image: python:3.7
  before_script:
    - pip install 'isort<5' # workaround for https://github.com/gforcada/flake8-isort/issues/88
    - pip install flake8-awesome
  script:
    - flake8


# For HTML tables, test that bundled files are uptodate
javascript-build:
  stage: test
  image: node:lts
  before_script:
    - cd benchexec/tablegenerator/react-table
    - npm install
    - npm rebuild node-sass
  script:
    - npm run build
    - git diff --stat --exit-code
  artifacts:
    paths:
      - benchexec/tablegenerator/react-table/build
    when: on_failure
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - "benchexec/tablegenerator/react-table/node_modules"

javascript-tests:
  stage: test
  image: node:lts
  before_script:
    - cd benchexec/tablegenerator/react-table
    - npm install
  script:
    - npm run test
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - "benchexec/tablegenerator/react-table/node_modules"

javascript-eslint:
  stage: test
  image: node:lts
  before_script:
    - cd benchexec/tablegenerator/react-table
    - npm install
  script:
    - npm run lint
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - "benchexec/tablegenerator/react-table/node_modules"


# check license declarations etc.
reuse:
  stage: test
  image:
    name: fsfe/reuse:latest
    entrypoint: [""]
  script:
    - reuse lint


# Build Docker images
# following this guideline: https://docs.gitlab.com/ee/ci/docker/using_kaniko.html
.build-docker:
  stage: images
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /root/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --dockerfile $CI_PROJECT_DIR/$DOCKERFILE --destination $CI_REGISTRY_IMAGE/$IMAGE
  only:
    - schedules
    - web

build-docker:test:python-3.5:
  extends: .build-docker
  variables:
    DOCKERFILE: test/Dockerfile.python-3.5
    IMAGE: test:python-3.5

build-docker:test:python-3.6:
  extends: .build-docker
  variables:
    DOCKERFILE: test/Dockerfile.python-3.6
    IMAGE: test:python-3.6

build-docker:test:python-3.7:
  extends: .build-docker
  variables:
    DOCKERFILE: test/Dockerfile.python-3.7
    IMAGE: test:python-3.7

build-docker:test:python-3.8:
  extends: .build-docker
  variables:
    DOCKERFILE: test/Dockerfile.python-3.8
    IMAGE: test:python-3.8
